HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36',
	'Referer': 'http://yify.tv/'
}

JSON_URL = 'http://yify.tv/reproductor2/pk/pk/plugins/player_p.php?url=%s'
RE_PLAYER = Regex('showPkPlayer\("([^"]+)')

####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0].split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS)

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	try: genres = html.xpath('//meta[@itemprop="genre"]/@content')[0].split(', ')
	except: genres = None

	try: directors = html.xpath('//meta[@itemprop="director"]/@content')[0].split(', ')
	except: directors = None

	try: writers = html.xpath('//meta[@itemprop="author"]/@content')[0].split(', ')
	except: writers = None

	try: year = int(html.xpath('//a[@rel="tag" and contains(@href, "/years/")]/text()')[0])
	except: year = None

	try: duration = int(html.xpath('//meta[@itemprop="duration"]/@content')[0].strip()) * 1000
	except: duration = None

	return MovieObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.jpg'),
		genres = genres,
		directors = directors,
		writers = writers,
		year = year,
		duration = duration
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, res=resolution))
			],
			video_resolution = resolution,
			bitrate = bitrate,
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		) for resolution, bitrate in [(720, 1500)]
	]

####################################################################################################
@indirect
def PlayVideo(url, res):

	data = HTTP.Request(url, headers=HTTP_HEADERS).content
	video_id = RE_PLAYER.search(data)

	if not video_id:
		raise Ex.MediaNotAvailable

	json_obj = JSON.ObjectFromURL(JSON_URL % video_id.group(1), headers=HTTP_HEADERS)
	available_resolutions = []

	for media in json_obj:
		if 'type' in media and media['type'] == 'video/mpeg4':
			available_resolutions.append(media['height'])

	if len(available_resolutions) < 1:
		raise Ex.MediaNotAvailable

	closest = min((abs(res - i), i) for i in available_resolutions)[1]

	for media in json_obj:
		if 'type' in media and media['type'] == 'video/mpeg4' and media['height'] == closest:

			Log('\n----------\nOriginating URL: %s\nChosen resolution (vertical): %s\nSelected resolution: %sx%s\nVideo URL: %s\n----------' % (url, res, media['width'], media['height'], media['url']))

			video_url = media['url']
			break

	return IndirectResponse(VideoClipObject, key=video_url)
